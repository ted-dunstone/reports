# items to be configured
variables:
    - blah: 122
    - key: 34
    - value_columns: ('matches','quality')
    - unique_ids: for key in df['identifier'].unique()
    - build_val: "{blah}+{key}"
    - threshold: 500
    - test_params: 
        matches:
            value: test_params
            value2: test_params2
            threshold: 500
        quality:
            threshold: 0
            value: test_params1
            value2: test_params2
            threshold: 40
            

## END ###

# meta data for the document construction
meta:
    output_type: md
    # Main Parameters
    title: Enrollment Issues Simprint
    subtitle:  Design and Usage Information for Techncial Users
    author: Biometix
    date: 5th March 2020
    keywords: '[analytics]'
    # Personal Params
    contact: Ted Dunstone
    contact_phone: +61 (2) 419990968
    contact_email: ted@biometix.com
    classification: Commercial in Confidential
    # Report Specific Params

    customer: Biometix
    query: 123
    
data:
    - histogram_catagorical:
        fields: bin,sum(count) as total, identifier
        table: _hist
        query:  where identifier not in {{value_columns}} and identifier<>'' group by identifier,bin order by total desc;
    - histogram_continuous:
        fields: bin,sum(count) as total, identifier
        table: _hist
        query: where identifier in {{value_columns}} group by identifier,bin order by total;
    - enroller_location:
        fields: m.pid,gid,max(score) as maxs,enrollerid,count(1) as total,location
        table: match m,enrolment e 
        query: where m.pid=e.pid and m.pid<>gid and score>300 group by m.pid,gid,enrollerid,location having count(1)>1 order by total desc;
    - enroller_date:
        fields: substr(time,0,11) as date, count(1) as total
        table: enrolment 
        query: group by date order by date
    - stats_fingers:
        fields: count(1) as total,avg(score) as mean,instance as bin
        table: match 
        query: group by instance
    - stats_fingers_quality:
        fields: count(1) as total,avg(quality) as mean,finger as bin
        table:  _quality 
        query: group by finger
        

analysis:
    enroller_date:
        use_data: enroller_date
        py: |
            df['date']=pd.to_datetime(df['date'])
            df=df.set_index('date').resample('W').sum()
            ax=sns.lineplot(x=df.index, y="total", data=df, palette="rocket")
            #ax.set(xticks=df.index.values)
            #ax.xaxis.set_major_formatter(dates.DateFormatter("%d-%b-%Y"))
            #ax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right')
            ax.grid(b=True, which='major',linestyle=':')
        plot:
            caption: Counts of enrollments versus dates with scores above {{threshold}}
            labels: Enrolment Date, X Axis
            height: 9
    
    histogram_catagorical:
        use_data: histogram_catagorical
        params: key, limit
        py: |
            data = df[df["identifier"]==key][:limit]
            data = data[['bin','total']].rename(columns={'bin':key,'total':'total'})
            ax=sns.barplot(x=key, y="total", data=data, palette="rocket")
            #ax.set(yscale="log")
            ax.ticklabel_format(style='plain', axis='y') #,useOffset=False)
            ax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right')
        plot:
            caption: Counts of enrollments versus dates with scores above {{threshold}}
            height: 9

    pie:
        use_data: histogram_catagorical
        params: key, limit
        py: |
            data = df[df["identifier"]==key]
            data = data.sort_values('total', ascending = False)
            df2 = data[:limit].copy()
            df2 = pd.concat([df2, pd.DataFrame(data = {'bin': ['others'],'total' : [df['total'][limit:].sum()]})])        
            df2.set_index('bin').plot.pie(y='total', figsize=(5, 5), autopct='%1.0f%%')
        plot:
            caption: Counts of enrollments versus dates with scores above {{threshold}}
            height: 9
    
    pie_test:
        params: limit
        py: |
            data = df.sort_values('total', ascending = False)
            df2 = data[:limit].copy()
            df2 = pd.concat([df2, pd.DataFrame(data = {'bin': ['others'],'total' : [df['total'][limit:].sum()]})])        
            df2.set_index('bin').plot.pie(y='total', figsize=(5, 5), autopct='%1.0f%%', legend=False)
        plot:
            caption: This is a wow
            height: 9
        
    histogram_continuous:
        use_data: histogram_continuous
        params: key,threshold
        py: |
            data = df[df["identifier"]==key]
            data = data[['bin','total']].rename(columns={'bin':key,'total':'total'})
            ax=sns.lineplot(x=key, y="total", data=data)
            if threshold:
                ax.axvline(x=threshold,linestyle='-.',color='red',label='threshold')
            ax.set(yscale="log")
            ax.set_ylabel('total (log scale)')
            ax.grid(b=True, which='major',linestyle=':',alpha=0.5)
        plot:
            caption: Counts of enrollments versus dates with scores above {{threshold}}
            height: 9        

    Heat_map:
        use_data: enroller_location
        py: |
            global df_heat

            df_heat = (df
                    .groupby('enrollerid')
                    .filter(lambda x : len(x) > 0)
                    .groupby(['enrollerid', 'location'])
                    .size()
                    .unstack()
                    )
            g = sns.heatmap(
                df_heat, 
                #square=True, # make cells square
                cbar_kws= {'fraction' : 0.01}, # shrink colour bar
                cmap='OrRd', # use orange/red colour map
                linewidth=1 # space between cells
            )
        plot:
            caption: From Caption
            height: 9
        table: 
            caption: A categorical table
            variable: df_heat

    decision_tree:
        uml: |
            @startuml
            skinparam shadowing false
            skinparam foregroundColor #EEEEEE

            start

            :full match of all data
            //governance// procedures
            in place that will ensure
            that citizens rights are
            protected (Biometix); 

            :import into Performix;

            :modeling and analysis;

            :producing report and presentation;

            stop

            @enduml
        plot:
            caption: A new diagram
            height: 9

report:
    - Introduction: 
        - |
            
            This report has been automatically produced using Performix. It provides two benefits:

            1. once we have generated the flat comparison scores there are a lot of scripts and manual effort that go into setting the right thresholds for match/non-match, 
            2. determining different ways to cluster the outputs, and extracting more specific trends or anomalous patterns that we should be sharing to our partners. 
            
            Beneficiary
            :   Someone enrolled into the Simprints database. Suppose Simprints is part of a maternal healthcare system, the beneficiaries would be the mothers who are receiving healthcare. We take their fingerprints, and assign them GUIDs (unique IDs). 
            \vskip 0.1 cm

            User
            :   Someone who uses Simprints' technology to enrol beneficiaries into the system and deliver services. So in the maternal healthcare example, a User would be a Health Worker who visits mothers and delivers services. Each user is assigned a unique pseudoUserId.
            \vskip 0.1 cm

            Module
            :   A geographical area. We make the (okay-ish) assumption that beneficiaries are unlikely to move between modules. So, during identification or deduplication, we only compare fingerprints from within the same module (so that the total number of comparisons we make is not too large). Each module is assigned a unique pseudoModuleId.
            \vskip 0.1 cm

            See table \ref{features_table}.

            | Function name | Description                    |
            | ------------- | ------------------------------ |
            | `help()`      | Display the help window.       |
            | `destroy()`   | **Destroy your computer!**     |

            Table: Performix Features \label{features_table}

        #- an: decision_tree
        - py: |
            print("blah")
        - Errors:
            - |
                to_presentation
                window
            - |
                Hello!
            - Suberrors:
                - Suberrors
        - NewSection:
            - Last section  
    - Data:
        - |
            * **enrolments_for_biometix.csv** contains a list of all our beneficiaries. Their unique ID is guid, the user who enrolled them is pseudoUserId, the module (geographical area) in which they were enrolled is pseudoModuleId, and enrolmentTime (if not NULL) is the time at which they were enrolled.
            * **user_guids_for_biometix.csv** contains a list of those GUIDs which correspond to users whose biometric data we happened to collect (note that this was not done for all users, and note that some users have been given multiple GUIDs because we accidentally registered them multiple times). For some subset of the users, we have also registered them as beneficiaries (as in we have given them guids that correspond to their own fingerprints). Note that we only have this data for some users and some users have been registered multiple times (i.e. been given multiple guids that correspond to their own fingerprints). For an initial analysis, where you're just trying to find duplicates, and nothing to do with trends that correspond to different users, you can just ignore this table. Note that for comparisons (more below), we have artificially treated each of these user-specific GUIDs as if they were enrolled in all modules.
            * **quality_scores.csv** (compressed using GZIP) contains the quality scores for each of the fingerprint images we collected during registration. You can ignore sessionId, but for each guid, finger is LEFT_THUMB, LEFT_INDEX_FINGER, RIGHT_THUMB, or RIGHT_INDEX_FINGER, and quality is the quality score returned by our extractor.
            * **comparisons** contains a bunch of CSVs (each compressed using GZIP) that contains pairwise comparisons of our beneficiaries' registered fingerprints. This was done module by module, so it only contains all pairs of GUIDs guid1 x guid2 where guid1 and guid2 are from within the same module (during registration, from table 1.) or if guid1 or guid2 are users (from table 2.). Note that all GUIDs have been stored as bytes, not as strings. I've given you sample code below to convert between bytes and GUID strings (in Python, but any language you use will have a Base 64 encoder/decoder, I'm sure). Our matcher is not finger agnostic, so left thumbs are only compared with left thumbs, left indices with left indices, and so on - the column finger specifies which finger is being compared (LEFT_THUMB, LEFT_INDEX_FINGER, RIGHT_THUMB, or RIGHT_INDEX_FINGER) and matchScore is the score returned by our matcher, where the higher the number, the more likely it is that those fingerprints belonged to the same person.
       
        - Meta Data: 
            - |
                A data section
            - pie_test():
                limit: 3
                after: this comes after
                use_data: stats_fingers
                plot:
                    caption: from dict
                    height: 3

            - pie_test():
                limit: 24
                use_data: stats_fingers_quality
                plot:
                    caption: my new cap 1
                    height: 5
            - histogram_catagorical():
                key: location
                limit: 15
                plot:
                    caption: override caption
            - pie:
                key: location
                limit: 10
            - histogram_catagorical():
                key: enrollerid
                limit: 25
            - pie():
                key: enrollerid
                limit: 10
            - enroller_date():
        - Match and Score Distributiuons: 
            - |
                The following section provides an overiew of the match and quality distributions.
            - an: histogram_continuous(key="matches",threshold={{threshold}})
    {% for key,value in test_params.items() %}
    - {{key.title()}}:
        - subsection [{{value.value}}]
        - an: histogram_continuous(key="{{key}}",threshold={{value.threshold}})
    {% endfor %}
    - Analysis: 
        - |
            A deeper look 
            \warningbox{Should be a waring}
        - an: Heat_map(_plot_caption="A map of the areas below")
        
    - Conclusion:
        - |        
            In conclusion this is the end of the report.

            [**Duns2008**] Dunstone, T. and Yager, N., 2008. Biometric system and data analysis: Design, evaluation, and data mining. Springer Science & Business Media.

            \appendix
            \section*{Appendices}
            \addcontentsline{toc}{section}{Appendices}
    - Appendix:
        - Imported from file 
        - file: 300_Latex_Extras.md

presentation:
    - Introduction: |
        blah
    - Middle: wow
    - Conclusion:
        - This is the conclusion
    
